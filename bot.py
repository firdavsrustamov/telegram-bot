import logging
import json
import os
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, Update
from telegram.error import Forbidden, BadRequest  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –¥–æ—Å—Ç—É–ø–∞
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from config import TOKEN, ADMIN_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º–∏ ID –≥—Ä—É–ø–ø –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
GROUPS_FILE = 'groups.json'
USERS_FILE = 'users.json'


def load_groups():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ ID –≥—Ä—É–ø–ø –∏–∑ —Ñ–∞–π–ª–∞."""
    if os.path.exists(GROUPS_FILE):
        with open(GROUPS_FILE, 'r') as f:
            return json.load(f)
    return []


def save_groups(groups):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ ID –≥—Ä—É–ø–ø –≤ —Ñ–∞–π–ª."""
    with open(GROUPS_FILE, 'w') as f:
        json.dump(groups, f)


def load_users():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞."""
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'r') as f:
            return json.load(f)
    return []


def save_users(users):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª."""
    with open(USERS_FILE, 'w') as f:
        json.dump(users, f)


def get_inline_keyboard(user_id=None):
    """
    –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é.
    –ï—Å–ª–∏ user_id —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ADMIN_ID, –≤–∫–ª—é—á–∞—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    keyboard = [
        [
            InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø", callback_data='list_groups'),
            InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='list_users')
        ],
        [
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é", callback_data='refresh_menu')
        ]
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if ADMIN_ID and user_id == ADMIN_ID:
        keyboard.extend([
            [
                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='add_entity'),
                InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data='remove_group')
            ],
            [
                InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='remove_user')
            ]
        ])
    return InlineKeyboardMarkup(keyboard)


def get_main_menu():
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é."""
    keyboard = [[KeyboardButton("‚ú® –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é")]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ‚Äì –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–≤–æ–¥ –º–µ–Ω—é (—Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º)."""
    if not update.message or update.message.chat.type != 'private':
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /start, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
    user = update.message.from_user
    welcome_text = (
        f"*–ü—Ä–∏–≤–µ—Ç, {user.first_name}!* üéâ\n\n"
        "–Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—ã Telegram. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ —è —Ä–∞–∑–æ—à–ª—é –µ–≥–æ –ø–æ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –≥—Ä—É–ø–ø–∞–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
        "*–ú–µ–Ω—é:* –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ‚Äì —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º–∏."
    )
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
    await update.message.reply_text(welcome_text, parse_mode='Markdown',
                                    reply_markup=get_inline_keyboard(user_id=user.id))
    # –û—Ç–¥–µ–ª—å–Ω–æ –≤—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π
    await update.message.reply_text('üîΩ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*:', parse_mode='Markdown', reply_markup=get_main_menu())


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é."""
    if update.callback_query.message.chat.type != 'private':
        return  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∂–∞—Ç–∏—è –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

    user_id = query.from_user.id
    data = query.data

    if data == 'list_groups':
        groups = load_groups()
        if groups:
            # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö ID –≥—Ä—É–ø–ø
            group_list = '\n'.join(f'üîπ {gid}' for gid in groups)
            await query.message.reply_text(f'üìã *–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø*:\n{group_list}', parse_mode='Markdown')
        else:
            await query.message.reply_text('üì≠ *–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç.*', parse_mode='Markdown')

    elif data == 'list_users':
        users = load_users()
        if users:
            # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_list = '\n'.join(f'üîπ {uid}' for uid in users)
            await query.message.reply_text(f'üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*:\n{user_list}', parse_mode='Markdown')
        else:
            await query.message.reply_text('üì≠ *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.*', parse_mode='Markdown')

    elif data == 'add_entity':
        # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å
        if user_id != ADMIN_ID:
            await query.message.reply_text('üö´ *–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.*',
                                           parse_mode='Markdown')
            return
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å, –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ ID
        await query.message.reply_text(
            '‚ûï *–ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å?*\n1Ô∏è‚É£ ID –≥—Ä—É–ø–ø—ã (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)\n2Ô∏è‚É£ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)',
            parse_mode='Markdown')
        context.user_data['awaiting_entity_id'] = 'add'

    elif data == 'remove_group':
        if user_id != ADMIN_ID:
            await query.message.reply_text('üö´ *–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.*',
                                           parse_mode='Markdown')
            return
        await query.message.reply_text('üóë *–í–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è*:', parse_mode='Markdown')
        context.user_data['awaiting_entity_id'] = 'remove_group'

    elif data == 'remove_user':
        if user_id != ADMIN_ID:
            await query.message.reply_text('üö´ *–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.*',
                                           parse_mode='Markdown')
            return
        await query.message.reply_text('üóë *–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è*:', parse_mode='Markdown')
        context.user_data['awaiting_entity_id'] = 'remove_user'

    elif data == 'refresh_menu':
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é (–ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–∞–Ω–æ–≤–æ, —É—á–∏—Ç—ã–≤–∞—è —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        await query.message.reply_text('üîÑ *–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ*:', parse_mode='Markdown',
                                       reply_markup=get_inline_keyboard(user_id=user_id))


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º).
    - –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ.
    - –ò–Ω–∞—á–µ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.
    """
    if not update.message or update.message.chat.type != 'private':
        return  # –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º

    user_id = update.message.from_user.id
    text = update.message.text

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"
    if text == '‚ú® –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é':
        await update.message.reply_text('‚ú® *–ú–µ–Ω—é*:', parse_mode='Markdown',
                                        reply_markup=get_inline_keyboard(user_id=user_id))
        return

    # –ï—Å–ª–∏ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥ ID (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ)
    if context.user_data.get('awaiting_entity_id'):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if user_id != ADMIN_ID:
            await update.message.reply_text('üö´ *–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.*',
                                            parse_mode='Markdown')
            context.user_data.clear()
            return
        try:
            entity_id = int(text.strip())
        except ValueError:
            await update.message.reply_text('‚ùå *ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.*', parse_mode='Markdown')
            return

        action = context.user_data.get('awaiting_entity_id')
        context.user_data.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
        if action == 'add':
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            groups = load_groups()
            users = load_users()
            if entity_id < 0:
                # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –≥—Ä—É–ø–ø–∞
                if entity_id not in groups:
                    groups.append(entity_id)
                    save_groups(groups)
                    await update.message.reply_text(f'‚úÖ *–ì—Ä—É–ø–ø–∞ {entity_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞.*', parse_mode='Markdown')
                else:
                    await update.message.reply_text(f'‚ö†Ô∏è *–ì—Ä—É–ø–ø–∞ {entity_id} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.*',
                                                    parse_mode='Markdown')
            else:
                # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                if entity_id not in users:
                    users.append(entity_id)
                    save_users(users)
                    await update.message.reply_text(f'‚úÖ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {entity_id} –¥–æ–±–∞–≤–ª–µ–Ω.*', parse_mode='Markdown')
                else:
                    await update.message.reply_text(f'‚ö†Ô∏è *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {entity_id} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.*',
                                                    parse_mode='Markdown')

        elif action == 'remove_group':
            groups = load_groups()
            if entity_id in groups:
                groups.remove(entity_id)
                save_groups(groups)
                await update.message.reply_text(f'üóë *–ì—Ä—É–ø–ø–∞ {entity_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.*', parse_mode='Markdown')
            else:
                await update.message.reply_text(f'‚ö†Ô∏è *–ì—Ä—É–ø–ø–∞ {entity_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ.*', parse_mode='Markdown')

        elif action == 'remove_user':
            users = load_users()
            if entity_id in users:
                users.remove(entity_id)
                save_users(users)
                await update.message.reply_text(f'üóë *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {entity_id} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.*',
                                                parse_mode='Markdown')
            else:
                await update.message.reply_text(f'‚ö†Ô∏è *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {entity_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.*',
                                                parse_mode='Markdown')

        # –ü–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        await update.message.reply_text('‚ú® *–ú–µ–Ω—é*:', parse_mode='Markdown',
                                        reply_markup=get_inline_keyboard(user_id=user_id))
        return

    # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–æ —Ä–∞—Å—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞.
    if user_id != ADMIN_ID:
        authorized_users = load_users()
        if user_id not in authorized_users:
            # –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω –∏ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await update.message.reply_text('üö´ *–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏.*', parse_mode='Markdown')
            return

    message_text = text  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    groups = load_groups()
    users = load_users()
    success_groups = 0
    success_users = 0
    removed_groups = []
    removed_users = []

    # –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º
    for group_id in list(groups):
        try:
            await context.bot.send_message(chat_id=group_id, text=message_text, parse_mode='Markdown')
            success_groups += 1
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {group_id}")
        except Forbidden as e:
            # –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (—É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)
            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {group_id}: {e}")
            removed_groups.append(group_id)
            groups.remove(group_id)
            save_groups(groups)
        except BadRequest as e:
            # –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π chat_id)
            if "chat not found" in str(e):
                logger.warning(f"–ì—Ä—É–ø–ø–∞ {group_id} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–µ –Ω–∞–π–¥–µ–Ω–∞): {e}")
                removed_groups.append(group_id)
                groups.remove(group_id)
                save_groups(groups)
            else:
                # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ BadRequest (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—Ç–∫–∏ Markdown)
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É {group_id}: {e}")

        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É {group_id}: {e}")

    # –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for user in list(users):
        try:
            await context.bot.send_message(chat_id=user, text=message_text, parse_mode='Markdown')
            success_users += 1
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}")
        except Forbidden as e:
            # –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–≤–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}: {e}")
            removed_users.append(user)
            users.remove(user)
            save_users(users)
        except BadRequest as e:
            if "chat not found" in str(e):
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ –Ω–∞–π–¥–µ–Ω): {e}")
                removed_users.append(user)
                users.remove(user)
                save_users(users)
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}: {e}")
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}: {e}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ä–∞—Å—Å—ã–ª–∫–∏
    total_groups = len(groups)
    total_users = len(users)
    response_lines = []
    response_lines.append(f'‚úÖ *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {success_groups} –∏–∑ {total_groups} –≥—Ä—É–ø–ø*.')
    response_lines.append(
        f'‚úÖ *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_users} –∏–∑ {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*.')  # —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

    # –£–≤–µ–¥–æ–º–ª—è–µ–º, –µ—Å–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –≥—Ä—É–ø–ø—ã/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã
    if removed_groups or removed_users:
        removed_info = ""
        if removed_groups:
            removed_info += "\nüóë *–£–¥–∞–ª—ë–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã:* " + ", ".join(str(g) for g in removed_groups)
        if removed_users:
            removed_info += "\nüóë *–£–¥–∞–ª—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:* " + ", ".join(str(u) for u in removed_users)
        response_lines.append(removed_info)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞—Å—Å—ã–ª–∫–µ
    await update.message.reply_text("\n".join(response_lines), parse_mode='Markdown',
                                    reply_markup=get_inline_keyboard(user_id=user_id))


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫, —á—Ç–æ–±—ã –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    logger.error(f"Update {update} –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É: {context.error}")
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (–µ—Å–ª–∏ —Å–ª—É—á–∏–ª–æ—Å—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
        if update and hasattr(update, 'message') and update.message:
            await update.message.reply_text(f'‚ùå *–û—à–∏–±–∫–∞:* `{context.error}`', parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–¥–æ–≤–æ–¥—á–∏–∫)
    application.run_polling()


if __name__ == '__main__':
    main()
