import asyncio
import logging
import json
import os
import sys
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, Update, ParseMode
from telegram.error import Forbidden, BadRequest, NetworkError, RetryAfter
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from filelock import FileLock
from config import TOKEN, ADMIN_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º–∏ ID –≥—Ä—É–ø–ø –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
GROUPS_FILE = 'groups.json'
USERS_FILE = 'users.json'

def escape_markdown_v2(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2."""
    chars = r'_[]()~`>#+-=|{}.!'
    for char in chars:
        text = text.replace(char, f'\\{char}')
    return text

def load_groups():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ ID –≥—Ä—É–ø–ø –∏–∑ —Ñ–∞–π–ª–∞ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π."""
    with FileLock(GROUPS_FILE + ".lock"):
        if os.path.exists(GROUPS_FILE):
            with open(GROUPS_FILE, 'r') as f:
                return json.load(f)
        return []

def save_groups(groups):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ ID –≥—Ä—É–ø–ø –≤ —Ñ–∞–π–ª —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π."""
    with FileLock(GROUPS_FILE + ".lock"):
        with open(GROUPS_FILE, 'w') as f:
            json.dump(groups, f)

def load_users():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π."""
    with FileLock(USERS_FILE + ".lock"):
        if os.path.exists(USERS_FILE):
            with open(USERS_FILE, 'r') as f:
                return json.load(f)
        return []

def save_users(users):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π."""
    with FileLock(USERS_FILE + ".lock"):
        with open(USERS_FILE, 'w') as f:
            json.dump(users, f)

def get_inline_keyboard(user_id=None):
    """
    –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é.
    –ï—Å–ª–∏ user_id —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ADMIN_ID, –≤–∫–ª—é—á–∞—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    keyboard = [
        [
            InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø", callback_data='list_groups'),
            InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='list_users')
        ],
        [
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é", callback_data='refresh_menu')
        ]
    ]
    if ADMIN_ID and user_id == ADMIN_ID:
        keyboard.extend([
            [
                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='add_entity'),
                InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data='remove_group')
            ],
            [
                InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='remove_user')
            ]
        ])
    return InlineKeyboardMarkup(keyboard)

def get_main_menu():
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é."""
    keyboard = [[KeyboardButton("‚ú® –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é")]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ‚Äì –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–≤–æ–¥ –º–µ–Ω—é (—Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö)."""
    if not update.message or update.message.chat.type != 'private':
        return
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /start")
    welcome_text = (
        f"*–ü—Ä–∏–≤–µ—Ç, {escape_markdown_v2(user.first_name)}!* üéâ\n\n"
        "–Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—ã Telegram\. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ —è —Ä–∞–∑–æ—à–ª—é –µ–≥–æ –ø–æ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –≥—Ä—É–ø–ø–∞–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\.\n\n"
        "*–ú–µ–Ω—é:* –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ‚Äì —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º–∏\."
    )
    await update.message.reply_text(welcome_text, parse_mode=ParseMode.MARKDOWN_V2,
                                    reply_markup=get_inline_keyboard(user_id=user.id))
    await update.message.reply_text('üîΩ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*:', parse_mode=ParseMode.MARKDOWN_V2,
                                    reply_markup=get_main_menu())

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é."""
    if update.callback_query.message.chat.type != 'private':
        return
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É {data}")

    if data == 'list_groups':
        groups = load_groups()
        if groups:
            group_list = '\n'.join(f'üîπ {gid}' for gid in groups)
            await query.message.reply_text(f'üìã *–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø*:\n{escape_markdown_v2(group_list)}',
                                          parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await query.message.reply_text('üì≠ *–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç\.*', parse_mode=ParseMode.MARKDOWN_V2)

    elif data == 'list_users':
        users = load_users()
        if users:
            user_list = '\n'.join(f'üîπ {uid}' for uid in users)
            await query.message.reply_text(f'üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*:\n{escape_markdown_v2(user_list)}',
                                          parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await query.message.reply_text('üì≠ *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç\.*', parse_mode=ParseMode.MARKDOWN_V2)

    elif data == 'add_entity':
        if user_id != ADMIN_ID:
            await query.message.reply_text('üö´ *–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É\.*',
                                          parse_mode=ParseMode.MARKDOWN_V2)
            return
        await query.message.reply_text(
            '‚ûï *–ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å?*\n1Ô∏è‚É£ ID –≥—Ä—É–ø–ø—ã \(–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ\)\n2Ô∏è‚É£ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \(–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ\)',
            parse_mode=ParseMode.MARKDOWN_V2)
        context.user_data['awaiting_entity_id'] = 'add'

    elif data == 'remove_group':
        if user_id != ADMIN_ID:
            await query.message.reply_text('üö´ *–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É\.*',
                                          parse_mode=ParseMode.MARKDOWN_V2)
            return
        await query.message.reply_text('üóë *–í–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è*:', parse_mode=ParseMode.MARKDOWN_V2)
        context.user_data['awaiting_entity_id'] = 'remove_group'

    elif data == 'remove_user':
        if user_id != ADMIN_ID:
            await query.message.reply_text('üö´ *–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É\.*',
                                          parse_mode=ParseMode.MARKDOWN_V2)
            return
        await query.message.reply_text('üóë *–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è*:', parse_mode=ParseMode.MARKDOWN_V2)
        context.user_data['awaiting_entity_id'] = 'remove_user'

    elif data == 'refresh_menu':
        await query.message.reply_text('üîÑ *–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ*:', parse_mode=ParseMode.MARKDOWN_V2,
                                      reply_markup=get_inline_keyboard(user_id=user_id))

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ.
    - –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ ID, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ.
    - –ò–Ω–∞—á–µ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.
    """
    if not update.message or update.message.chat.type != 'private':
        return
    user_id = update.message.from_user.id
    text = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {text}")

    if text == '‚ú® –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é':
        await update.message.reply_text('‚ú® *–ú–µ–Ω—é*:', parse_mode=ParseMode.MARKDOWN_V2,
                                       reply_markup=get_inline_keyboard(user_id=user_id))
        return

    if context.user_data.get('awaiting_entity_id'):
        if user_id != ADMIN_ID:
            await update.message.reply_text('üö´ *–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É\.*',
                                           parse_mode=ParseMode.MARKDOWN_V2)
            context.user_data.clear()
            return
        try:
            entity_id = int(text.strip())
        except ValueError:
            await update.message.reply_text('‚ùå *ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º\.*', parse_mode=ParseMode.MARKDOWN_V2)
            return

        action = context.user_data.get('awaiting_entity_id')
        context.user_data.clear()
        if action == 'add':
            groups = load_groups()
            users = load_users()
            if entity_id < 0:
                if entity_id not in groups:
                    groups.append(entity_id)
                    save_groups(groups)
                    await update.message.reply_text(f'‚úÖ *–ì—Ä—É–ø–ø–∞ {entity_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞\.*',
                                                  parse_mode=ParseMode.MARKDOWN_V2)
                else:
                    await update.message.reply_text(f'‚ö†Ô∏è *–ì—Ä—É–ø–ø–∞ {entity_id} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ\.*',
                                                  parse_mode=ParseMode.MARKDOWN_V2)
            else:
                if entity_id not in users:
                    users.append(entity_id)
                    save_users(users)
                    await update.message.reply_text(f'‚úÖ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {entity_id} –¥–æ–±–∞–≤–ª–µ–Ω\.*',
                                                  parse_mode=ParseMode.MARKDOWN_V2)
                else:
                    await update.message.reply_text(f'‚ö†Ô∏è *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {entity_id} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ\.*',
                                                  parse_mode=ParseMode.MARKDOWN_V2)

        elif action == 'remove_group':
            groups = load_groups()
            if entity_id in groups:
                groups.remove(entity_id)
                save_groups(groups)
                await update.message.reply_text(f'üóë *–ì—Ä—É–ø–ø–∞ {entity_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞\.*',
                                              parse_mode=ParseMode.MARKDOWN_V2)
            else:
                await update.message.reply_text(f'‚ö†Ô∏è *–ì—Ä—É–ø–ø–∞ {entity_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ\.*',
                                              parse_mode=ParseMode.MARKDOWN_V2)

        elif action == 'remove_user':
            users = load_users()
            if entity_id in users:
                users.remove(entity_id)
                save_users(users)
                await update.message.reply_text(f'üóë *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {entity_id} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞\.*',
                                              parse_mode=ParseMode.MARKDOWN_V2)
            else:
                await update.message.reply_text(f'‚ö†Ô∏è *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {entity_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ\.*',
                                              parse_mode=ParseMode.MARKDOWN_V2)
        await update.message.reply_text('‚ú® *–ú–µ–Ω—é*:', parse_mode=ParseMode.MARKDOWN_V2,
                                       reply_markup=get_inline_keyboard(user_id=user_id))
        return

    if user_id != ADMIN_ID:
        authorized_users = load_users()
        if user_id not in authorized_users:
            await update.message.reply_text('üö´ *–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏\.*',
                                           parse_mode=ParseMode.MARKDOWN_V2)
            return

    message_text = escape_markdown_v2(text)
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=message_text,
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except BadRequest as e:
        if "can't parse" in str(e).lower():
            await update.message.reply_text(
                '‚ùå *–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Markdown\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ä–∞–∑–º–µ—Ç–∫—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\.*',
                parse_mode=ParseMode.MARKDOWN_V2
            )
            return
        raise

    groups = load_groups()
    users = load_users()
    success_groups = 0
    success_users = 0
    groups_to_remove = []
    users_to_remove = []

    for group_id in groups:
        try:
            await context.bot.send_message(chat_id=group_id, text=message_text, parse_mode=ParseMode.MARKDOWN_V2)
            success_groups += 1
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {group_id}")
            await asyncio.sleep(0.1)
        except Forbidden:
            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É {group_id}")
            groups_to_remove.append(group_id)
        except BadRequest as e:
            if "chat not found" in str(e).lower():
                logger.warning(f"–ì—Ä—É–ø–ø–∞ {group_id} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                groups_to_remove.append(group_id)
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—Ç–∫–∏ –≤ –≥—Ä—É–ø–ø–µ {group_id}: {e}")
        except RetryAfter as e:
            logger.warning(f"–õ–∏–º–∏—Ç Telegram API –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}, –∂–¥—ë–º {e.retry_after} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(e.retry_after)
            await context.bot.send_message(chat_id=group_id, text=message_text, parse_mode=ParseMode.MARKDOWN_V2)
            success_groups += 1
        except NetworkError as e:
            logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É {group_id}: {e}")
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É {group_id}: {e}")

    for user in users:
        try:
            await context.bot.send_message(chat_id=user, text=message_text, parse_mode=ParseMode.MARKDOWN_V2)
            success_users += 1
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}")
            await asyncio.sleep(0.1)
        except Forbidden:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}")
            users_to_remove.append(user)
        except BadRequest as e:
            if "chat not found" in str(e).lower():
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                users_to_remove.append(user)
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}: {e}")
        except RetryAfter as e:
            logger.warning(f"–õ–∏–º–∏—Ç Telegram API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}, –∂–¥—ë–º {e.retry_after} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(e.retry_after)
            await context.bot.send_message(chat_id=user, text=message_text, parse_mode=ParseMode.MARKDOWN_V2)
            success_users += 1
        except NetworkError as e:
            logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}: {e}")
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}: {e}")

    if groups_to_remove:
        for group_id in groups_to_remove:
            groups.remove(group_id)
        save_groups(groups)
    if users_to_remove:
        for user in users_to_remove:
            users.remove(user)
        save_users(users)

    response_lines = [
        f'‚úÖ *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {success_groups} –∏–∑ {len(groups)} –≥—Ä—É–ø–ø*\.',
        f'‚úÖ *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_users} –∏–∑ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\.'
    ]
    if groups_to_remove or users_to_remove:
        removed_info = ""
        if groups_to_remove:
            removed_info += f"\nüóë *–£–¥–∞–ª—ë–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã:* {', '.join(str(g) for g in groups_to_remove)}"
        if users_to_remove:
            removed_info += f"\nüóë *–£–¥–∞–ª—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:* {', '.join(str(u) for u in users_to_remove)}"
        response_lines.append(escape_markdown_v2(removed_info))

    await update.message.reply_text(
        "\n".join(response_lines),
        parse_mode=ParseMode.MARKDOWN_V2,
        reply_markup=get_inline_keyboard(user_id=user_id)
    )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)
    if update and hasattr(update, 'message') and update.message:
        await update.message.reply_text(
            f'‚ùå *–û—à–∏–±–∫–∞:* `{escape_markdown_v2(str(context.error))}`',
            parse_mode=ParseMode.MARKDOWN_V2
        )
    if ADMIN_ID:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f'‚ùå *–û—à–∏–±–∫–∞ –±–æ—Ç–∞:* `{escape_markdown_v2(str(context.error))}`',
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    try:
        logger.info(f"Starting bot with Python {sys.version} and python-telegram-bot {telegram.__version__}")
        application = await Application.builder().token(TOKEN).build()
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(button_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        application.add_error_handler(error_handler)
        await application.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        logger.error(f"Failed to start bot: {e}", exc_info=e)
        if ADMIN_ID:
            await application.bot.send_message(
                chat_id=ADMIN_ID,
                text=f'‚ùå *–ë–æ—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è:* `{escape_markdown_v2(str(e))}`',
                parse_mode=ParseMode.MARKDOWN_V2
            )
        raise

if __name__ == '__main__':
    asyncio.run(main())
