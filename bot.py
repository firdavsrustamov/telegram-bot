import logging
import json
import os
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from config import TOKEN, ADMIN_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
GROUPS_FILE = 'groups.json'
USERS_FILE = 'users.json'

def load_groups():
    if os.path.exists(GROUPS_FILE):
        with open(GROUPS_FILE, 'r') as f:
            return json.load(f)
    return []

def save_groups(groups):
    with open(GROUPS_FILE, 'w') as f:
        json.dump(groups, f)

def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'r') as f:
            return json.load(f)
    return []

def save_users(users):
    with open(USERS_FILE, 'w') as f:
        json.dump(users, f)

def get_inline_keyboard():
    keyboard = [
        [
            InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø", callback_data='list_groups'),
            InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='list_users')
        ],
        [
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é", callback_data='refresh_menu')
        ]
    ]
    if ADMIN_ID:
        keyboard.extend([
            [
                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='add_entity'),
                InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data='remove_group')
            ],
            [
                InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='remove_user'),
            ]
        ])
    return InlineKeyboardMarkup(keyboard)

def get_main_menu():
    keyboard = [[KeyboardButton("‚ú® –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é")]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or update.message.chat.type != 'private':
        return
    user = update.message.from_user
    welcome_text = (
        f"*–ü—Ä–∏–≤–µ—Ç, {user.first_name}!* üéâ\n\n"
        "–Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—ã Telegram. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ —è —Ä–∞–∑–æ—à–ª—é –µ–≥–æ –ø–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º.\n\n"
        "*–ú–µ–Ω—é:* –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    )
    await update.message.reply_text(welcome_text, parse_mode='Markdown', reply_markup=get_inline_keyboard())
    await update.message.reply_text('üîΩ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*:', parse_mode='Markdown', reply_markup=get_main_menu())

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query.message.chat.type != 'private':
        return
    query = update.callback_query
    await query.answer()

    if query.data == 'list_groups':
        groups = load_groups()
        if groups:
            await query.message.reply_text('üìã *–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø*:\n' + '\n'.join(f'üîπ {gid}' for gid in groups), parse_mode='Markdown')
        else:
            await query.message.reply_text('üì≠ *–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç.*', parse_mode='Markdown')
    elif query.data == 'list_users':
        users = load_users()
        if users:
            await query.message.reply_text('üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*:\n' + '\n'.join(f'üîπ {uid}' for uid in users), parse_mode='Markdown')
        else:
            await query.message.reply_text('üì≠ *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.*', parse_mode='Markdown')
    elif query.data == 'add_entity':
        if query.from_user.id != ADMIN_ID:
            await query.message.reply_text('üö´ *–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.*', parse_mode='Markdown')
            return
        await query.message.reply_text('‚ûï *–ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å?*\n1Ô∏è‚É£ ID –≥—Ä—É–ø–ø—ã (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ)\n2Ô∏è‚É£ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ)', parse_mode='Markdown')
        context.user_data['awaiting_entity_id'] = 'add'
    elif query.data == 'remove_group':
        if query.from_user.id != ADMIN_ID:
            await query.message.reply_text('üö´ *–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.*', parse_mode='Markdown')
            return
        await query.message.reply_text('üóë *–í–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è*:', parse_mode='Markdown')
        context.user_data['awaiting_entity_id'] = 'remove_group'
    elif query.data == 'remove_user':
        if query.from_user.id != ADMIN_ID:
            await query.message.reply_text('üö´ *–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.*', parse_mode='Markdown')
            return
        await query.message.reply_text('üóë *–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è*:', parse_mode='Markdown')
        context.user_data['awaiting_entity_id'] = 'remove_user'
    elif query.data == 'refresh_menu':
        await query.message.reply_text('üîÑ *–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ*:', parse_mode='Markdown', reply_markup=get_inline_keyboard())

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or update.message.chat.type != 'private':
        return
    user_id = update.message.from_user.id
    text = update.message.text

    if text == '‚ú® –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é':
        await update.message.reply_text('‚ú® *–ú–µ–Ω—é*:', parse_mode='Markdown', reply_markup=get_inline_keyboard())
        return

    if context.user_data.get('awaiting_entity_id'):
        if user_id != ADMIN_ID:
            await update.message.reply_text('üö´ *–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.*', parse_mode='Markdown')
            return
        try:
            entity_id = int(text)
            action = context.user_data['awaiting_entity_id']
            if action == 'add':
                groups = load_groups()
                users = load_users()
                if entity_id < 0:
                    if entity_id not in groups:
                        groups.append(entity_id)
                        save_groups(groups)
                        await update.message.reply_text(f'‚úÖ *–ì—Ä—É–ø–ø–∞ {entity_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞.*', parse_mode='Markdown')
                    else:
                        await update.message.reply_text(f'‚ö†Ô∏è *–ì—Ä—É–ø–ø–∞ {entity_id} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.*', parse_mode='Markdown')
                else:
                    if entity_id not in users:
                        users.append(entity_id)
                        save_users(users)
                        await update.message.reply_text(f'‚úÖ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {entity_id} –¥–æ–±–∞–≤–ª–µ–Ω.*', parse_mode='Markdown')
                    else:
                        await update.message.reply_text(f'‚ö†Ô∏è *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {entity_id} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.*', parse_mode='Markdown')
            elif action == 'remove_group':
                groups = load_groups()
                if entity_id in groups:
                    groups.remove(entity_id)
                    save_groups(groups)
                    await update.message.reply_text(f'üóë *–ì—Ä—É–ø–ø–∞ {entity_id} —É–¥–∞–ª–µ–Ω–∞.*', parse_mode='Markdown')
                else:
                    await update.message.reply_text(f'‚ö†Ô∏è *–ì—Ä—É–ø–ø–∞ {entity_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.*', parse_mode='Markdown')
            elif action == 'remove_user':
                users = load_users()
                if entity_id in users:
                    users.remove(entity_id)
                    save_users(users)
                    await update.message.reply_text(f'üóë *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {entity_id} —É–¥–∞–ª–µ–Ω.*', parse_mode='Markdown')
                else:
                    await update.message.reply_text(f'‚ö†Ô∏è *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {entity_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.*', parse_mode='Markdown')
            context.user_data.clear()
            await update.message.reply_text('‚ú® *–ú–µ–Ω—é*:', parse_mode='Markdown', reply_markup=get_inline_keyboard())
        except ValueError:
            await update.message.reply_text('‚ùå *ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.*', parse_mode='Markdown')
        return

    # –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã
    message_text = text
    groups = load_groups()
    success_count = 0

    for group_id in groups:
        try:
            await context.bot.send_message(chat_id=group_id, text=message_text, parse_mode='Markdown')
            success_count += 1
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {group_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É {group_id}: {e}")

    await update.message.reply_text(
        f'‚úÖ *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {success_count} –∏–∑ {len(groups)} –≥—Ä—É–ø–ø.*',
        parse_mode='Markdown', reply_markup=get_inline_keyboard()
    )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Update {update} –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É: {context.error}")
    try:
        if update and hasattr(update, 'message') and update.message:
            await update.message.reply_text(f'‚ùå *–û—à–∏–±–∫–∞:* `{context.error}`', parse_mode='Markdown')
    except Exception:
        pass

def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_error_handler(error_handler)
    application.run_polling()

if __name__ == '__main__':
    main()
