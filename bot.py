
import asyncio
import logging
import json
import os
import sys
import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from filelock import FileLock, Timeout
from aiohttp import web
from config import TOKEN, ADMIN_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

GROUPS_FILE = 'groups.json'
USERS_FILE = 'users.json'

def escape_markdown_v2(text):
    if not isinstance(text, str):
        text = str(text)
    chars = r'_*[]()~`>#+-=|{}.!,:'
    for char in chars:
        text = text.replace(char, f'\\{char}')
    return text

def load_data(file_path):
    try:
        with FileLock(file_path + '.lock', timeout=5):
            if os.path.exists(file_path):
                with open(file_path, 'r') as f:
                    return json.load(f)
    except Timeout:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è —Ñ–∞–π–ª–∞: {file_path}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
    return []

def save_data(file_path, data):
    try:
        with FileLock(file_path + '.lock', timeout=5):
            with open(file_path, 'w') as f:
                json.dump(data, f)
    except Timeout:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª: {file_path}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ {file_path}: {e}")

def load_groups(): return load_data(GROUPS_FILE)
def save_groups(groups): save_data(GROUPS_FILE, groups)
def load_users(): return load_data(USERS_FILE)
def save_users(users): save_data(USERS_FILE, users)

def get_inline_keyboard(user_id=None):
    if user_id == ADMIN_ID:
        keyboard = [
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø", callback_data='list_groups'),
             InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='list_users')],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data='add_entity'),
             InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data='remove_group')],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='remove_user'),
             InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é", callback_data='refresh_menu')]
        ]
    else:
        keyboard = [
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø", callback_data='list_groups'),
             InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='list_users')],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é", callback_data='refresh_menu')]
        ]
    return InlineKeyboardMarkup(keyboard)

def get_main_menu():
    return ReplyKeyboardMarkup([[KeyboardButton("‚ú® –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é")]], resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.chat.type == 'private':
        user = update.message.from_user
        text = (
            f"*–ü—Ä–∏–≤–µ—Ç\, {escape_markdown_v2(user.first_name)}\!*
"
            f"–Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π\, —Ñ–æ—Ç–æ\, —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏ –≤–∏–¥–µ–æ –≤ Telegram-–≥—Ä—É–ø–ø—ã\.
"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
        )
        await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=get_inline_keyboard(user.id))
        await update.message.reply_text(escape_markdown_v2("üîΩ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"), parse_mode=ParseMode.MARKDOWN_V2,
                                        reply_markup=get_main_menu())

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data
    if query.message.chat.type != 'private':
        return

    if data == 'list_groups':
        groups = load_groups()
        text = "\n".join(f"üîπ {gid}" for gid in groups) or "üì≠ –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç."
        await query.message.reply_text(escape_markdown_v2(text), parse_mode=ParseMode.MARKDOWN_V2)

    elif data == 'list_users':
        users = load_users()
        text = "\n".join(f"üîπ {uid}" for uid in users) or "üì≠ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç."
        await query.message.reply_text(escape_markdown_v2(text), parse_mode=ParseMode.MARKDOWN_V2)

    elif data in ['add_entity', 'remove_group', 'remove_user']:
        if user_id != ADMIN_ID:
            await query.message.reply_text(escape_markdown_v2("üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É."),
                                           parse_mode=ParseMode.MARKDOWN_V2)
            return
        context.user_data['awaiting_entity_id'] = data
        prompts = {
            'add_entity': "‚ûï –í–≤–µ–¥–∏—Ç–µ ID:
- –ì—Ä—É–ø–ø–∞: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ",
            'remove_group': "üóë –í–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            'remove_user': "üóë –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        }
        await query.message.reply_text(escape_markdown_v2(prompts[data]), parse_mode=ParseMode.MARKDOWN_V2)

    elif data == 'refresh_menu':
        await query.message.reply_text(escape_markdown_v2("üîÑ –ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ:"), parse_mode=ParseMode.MARKDOWN_V2,
                                       reply_markup=get_inline_keyboard(user_id))

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or update.message.chat.type != 'private':
        return
    user_id = update.message.from_user.id
    text = update.message.text

    if text == "‚ú® –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é":
        await update.message.reply_text(escape_markdown_v2("‚ú® –ú–µ–Ω—é:"), parse_mode=ParseMode.MARKDOWN_V2,
                                        reply_markup=get_inline_keyboard(user_id))
        return

    if context.user_data.get('awaiting_entity_id'):
        try:
            entity_id = int(text)
        except ValueError:
            await update.message.reply_text(escape_markdown_v2("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º."),
                                            parse_mode=ParseMode.MARKDOWN_V2)
            return
        action = context.user_data.pop('awaiting_entity_id')
        if action == 'add_entity':
            if entity_id < 0:
                groups = load_groups()
                if entity_id not in groups:
                    groups.append(entity_id)
                    save_groups(groups)
                    await update.message.reply_text(escape_markdown_v2("‚úÖ –ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞."),
                                                    parse_mode=ParseMode.MARKDOWN_V2)
            else:
                users = load_users()
                if entity_id not in users:
                    users.append(entity_id)
                    save_users(users)
                    await update.message.reply_text(escape_markdown_v2("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω."),
                                                    parse_mode=ParseMode.MARKDOWN_V2)
        elif action == 'remove_group':
            groups = load_groups()
            if entity_id in groups:
                groups.remove(entity_id)
                save_groups(groups)
                await update.message.reply_text(escape_markdown_v2("üóë –ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞."),
                                                parse_mode=ParseMode.MARKDOWN_V2)
        elif action == 'remove_user':
            users = load_users()
            if entity_id in users:
                users.remove(entity_id)
                save_users(users)
                await update.message.reply_text(escape_markdown_v2("üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω."),
                                                parse_mode=ParseMode.MARKDOWN_V2)
        return

    if user_id != ADMIN_ID and user_id not in load_users():
        await update.message.reply_text(escape_markdown_v2("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ."),
                                        parse_mode=ParseMode.MARKDOWN_V2)
        return

    if update.message.photo:
        content = update.message.photo[-1]
        method = lambda gid: context.bot.send_photo(chat_id=gid, photo=content.file_id)
    elif update.message.video:
        content = update.message.video
        method = lambda gid: context.bot.send_video(chat_id=gid, video=content.file_id)
    elif update.message.sticker:
        content = update.message.sticker
        method = lambda gid: context.bot.send_sticker(chat_id=gid, sticker=content.file_id)
    else:
        content = escape_markdown_v2(text)
        method = lambda gid: context.bot.send_message(chat_id=gid, text=content, parse_mode=ParseMode.MARKDOWN_V2)

    groups = load_groups()
    sent = 0
    for gid in groups:
        try:
            await method(gid)
            sent += 1
            await asyncio.sleep(0.3)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {gid}: {e}")

    await update.message.reply_text(escape_markdown_v2(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {sent} –≥—Ä—É–ø–ø."),
                                    parse_mode=ParseMode.MARKDOWN_V2)

async def webhook_handler(request, application):
    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        if update:
            await application.process_update(update)
        return web.Response(status=200)
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return web.Response(status=500)

async def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_text))

    await application.initialize()

    webhook_url = os.getenv("WEBHOOK_URL") or f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/webhook"
    await application.bot.set_webhook(url=webhook_url)

    app = web.Application()
    app.router.add_post('/webhook', lambda request: webhook_handler(request, application))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', int(os.getenv("PORT", 10000)))
    await site.start()

    await application.start()
    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    asyncio.run(main())
